# Copyright 2020 Jim O'Regan
# Apache 2.0

import 'alphabet.grm' as a;

delzero = "0".utf8 : "".utf8;
insspace = "".utf8 : " ".utf8;

card_1_9_m_nom = Optimize[StringFile['card-1-9-m-nom.tsv', 'utf8', 'utf8']];
card_1_9_m_gen = Optimize[StringFile['card-1-9-m-gen.tsv', 'utf8', 'utf8']];
card_1_9_m_ins = Optimize[StringFile['card-1-9-m-ins.tsv', 'utf8', 'utf8']];

card_11_19_m_nom = Optimize[StringFile['card-11-19-nom.tsv', 'utf8', 'utf8']];
card_11_19_m_gen = Optimize[StringFile['card-11-19-gen.tsv', 'utf8', 'utf8']];
card_11_19_m_ins = Optimize[StringFile['card-11-19-ins.tsv', 'utf8', 'utf8']];

card_10_90_m_nom = Optimize[StringFile['card-10-90-nom.tsv', 'utf8', 'utf8']];
card_10_90_m_gen = Optimize[StringFile['card-10-90-gen.tsv', 'utf8', 'utf8']];
card_10_90_m_ins = Optimize[StringFile['card-10-90-ins.tsv', 'utf8', 'utf8']];

# ordinals need 100-900 cardinals
export card_100_900_m_nom = Optimize[StringFile['card-100-900-nom.tsv', 'utf8', 'utf8']];
card_100_900_m_gen = Optimize[StringFile['card-100-900-gen.tsv', 'utf8', 'utf8']];
card_100_900_m_ins = Optimize[StringFile['card-100-900-ins.tsv', 'utf8', 'utf8']];

nozero = CDRewrite[
	("0".utf8 : "".utf8)+,
	"",
	"[EOS]".utf8,
	a.sigma_star];
nums_20_90 = Project[card_10_90_m_nom, 'input'] - "10".utf8;

card_20_90_m_nom = nums_20_90 @ card_10_90_m_nom;
card_20_90_m_nom_nozero = Optimize[Invert[Invert[card_20_90_m_nom] @ nozero]];
card_20_90_m_gen = nums_20_90 @ card_10_90_m_gen;
card_20_90_m_gen_nozero = Optimize[Invert[Invert[card_20_90_m_gen] @ nozero]];
card_20_90_m_ins = nums_20_90 @ card_10_90_m_ins;
card_20_90_m_ins_nozero = Optimize[Invert[Invert[card_20_90_m_ins] @ nozero]];

export base_card_1_99_m_nom = (
	card_11_19_m_nom |
	card_10_90_m_nom |
	card_20_90_m_nom_nozero insspace card_1_9_m_nom);
export base_card_1_99_m_gen = (
	card_11_19_m_gen |
	card_10_90_m_gen |
	card_20_90_m_gen_nozero insspace card_1_9_m_gen);
export base_card_1_99_m_ins = (
	card_11_19_m_ins |
	card_10_90_m_ins |
	card_20_90_m_ins_nozero insspace card_1_9_m_ins);
# This version for appending to higher (hundreds, etc.)
# so the 0 before single digits is not optional
inc_card_1_99_m_nom = Optimize[(delzero card_1_9_m_nom | base_card_1_99_m_nom)];
inc_card_1_99_m_gen = Optimize[(delzero card_1_9_m_gen | base_card_1_99_m_gen)];
inc_card_1_99_m_ins = Optimize[(delzero card_1_9_m_ins | base_card_1_99_m_ins)];
# Non-appending version (1, 01 | 101 etc)
noinc_card_1_99_m_nom = Optimize[(delzero? card_1_9_m_nom | base_card_1_99_m_nom)];
noinc_card_1_99_m_gen = Optimize[(delzero? card_1_9_m_gen | base_card_1_99_m_gen)];
noinc_card_1_99_m_ins = Optimize[(delzero? card_1_9_m_ins | base_card_1_99_m_ins)];

card_100_900_m_nom_nozero = Optimize[Invert[Invert[card_100_900_m_nom] @ nozero]];
card_100_900_m_gen_nozero = Optimize[Invert[Invert[card_100_900_m_gen] @ nozero]];
card_100_900_m_ins_nozero = Optimize[Invert[Invert[card_100_900_m_ins] @ nozero]];

base_card_1_999_m_nom = (
	card_100_900_m_nom |
	card_100_900_m_nom_nozero insspace inc_card_1_99_m_nom);
base_card_1_999_m_gen = (
	card_100_900_m_gen |
	card_100_900_m_gen_nozero insspace inc_card_1_99_m_gen);
base_card_1_999_m_ins = (
	card_100_900_m_ins |
	card_100_900_m_ins_nozero insspace inc_card_1_99_m_ins);
inc_card_1_999_m_nom = Optimize[(delzero inc_card_1_99_m_nom | base_card_1_999_m_nom)];
inc_card_1_999_m_gen = Optimize[(delzero inc_card_1_99_m_gen | base_card_1_999_m_gen)];
inc_card_1_999_m_ins = Optimize[(delzero inc_card_1_99_m_ins | base_card_1_999_m_ins)];
noinc_card_1_999_m_nom = Optimize[(delzero? noinc_card_1_99_m_nom | base_card_1_999_m_nom)];
noinc_card_1_999_m_gen = Optimize[(delzero? noinc_card_1_99_m_gen | base_card_1_999_m_gen)];
noinc_card_1_999_m_ins = Optimize[(delzero? noinc_card_1_99_m_ins | base_card_1_999_m_ins)];

one_digit = "0"? "1";
plural_digits_tens = ("0" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9");
export inc_plural_digits =  plural_digits_tens ("2" | "3" | "4");
export inc_nom_thousands_pl = Optimize[inc_plural_digits @ inc_card_1_99_m_nom];

inc_digits_2_99 = Project[inc_card_1_99_m_gen, 'input'] - one_digit;
inc_quantity_digits = inc_digits_2_99 - inc_plural_digits;
inc_nom_thousands_qnt = inc_quantity_digits @  inc_card_1_99_m_nom;
either_1000_nom_nozeros = (
	("1".utf8 : "jeden tysiąc".utf8) |
	("1".utf8 : "tysiąc".utf8));
either_1000_nom = either_1000_nom_nozeros ("000".utf8 : "".utf8);
inc_either_1000_nom = delzero either_1000_nom;
thousand_zeros_pl = "000".utf8 : " tysiące".utf8;
thousand_zeros_qnt = "000".utf8 : " tysięcy".utf8;
export inc_card_1_99_000_m_nom = (
	(inc_either_1000_nom) |
	(inc_nom_thousands_pl thousand_zeros_pl) |
	(inc_nom_thousands_qnt thousand_zeros_qnt));
