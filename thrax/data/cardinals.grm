# Copyright 2020 Jim O'Regan
# Apache 2.0

import 'alphabet.grm' as a;
import 'utils.grm' as u;
import 'cardinals_base.grm' as c;

delzero = "0".utf8 : "".utf8;
insspace = u.insspace;

#export card_1_999_999_m_nom = (
#	(del_thousand[inc_card_1_999_000_m_nom] insspace inc_card_1_999_m_nom) |
#	(("0"? "0")? "0")? noinc_card_1_999_m_nom |
#	noinc_card_1_999_000_m_nom);
# card_100_900_m_nom_nozero

# one: an acceptor with the singular form of the word (milion, tysiąc)
# different from both:
# pl: transducer mapping digits to words for plurals (xx2, xx3, xx4)
# (e.g.: inc_nom_thousands_pl)
# qnt: transducer mapping digits to words for 'quantities' (xx5 - xx9)
# (e.g.: inc_nom_thousands_qnt)
func gen_next[one, pl, qnt, prev, one_zeros, leading_zeros, final_zeros] {
	# inc_either_1000
	either_one = (("1" : "jeden ") u.I[one] | ("1" : "") u.I[one]);
	pl_word = c.mkpl[one];
	qnt_word = c.mkqty[one];
	zeros_pl = u.D["000"] u.I[" "] u.I[pl_word];
	zeros_qnt = u.D["000"] u.I[" "] u.I[qnt_word];
	cur_card_1_999 = (
		(one_zeros either_one u.D[final_zeros]) |
		(pl zeros_pl) |
		(qnt zeros_qnt));
	ret = Optimize[((del_thousand[cur_card_1_999] u.insspace prev) |
		(leading_zeros prev) |
		cur_card_1_999)];
	return ret;
}

o2z = ("0"? "0")?;
o3z = (("0"? "0")? "0")?;
inc_m_nom_1e6 = gen_next["tysiąc".utf8, inc_nom_thousands_pl, inc_nom_thousands_qnt, inc_card_1_999_m_nom, u.D["00"], u.D["000"], "000"];
noinc_m_nom_1e6 = gen_next["tysiąc".utf8, inc_nom_thousands_pl, inc_nom_thousands_qnt, inc_card_1_999_m_nom, o2z, o3z, "000"];
export inc_m_nom_1e9 = gen_next["milion", inc_nom_thousands_pl, inc_nom_thousands_qnt, inc_m_nom_1e6, u.D["00"], u.D["000"], "000000"];
export noinc_m_nom_1e9 = gen_next["milion", inc_nom_thousands_pl, inc_nom_thousands_qnt, inc_m_nom_1e6, o2z, o3z, "000000"];
